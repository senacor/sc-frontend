pipeline {

  agent any

  parameters {
    choice(choices: ['production', 'stage'], description: 'Enter the environemnt for deployment', name: 'environment')
  }

  stages {

    stage('reading config file') {
      steps {
        configFileProvider([configFile(fileId: params.environment + 'Config', variable: 'configFile')]) {
          load "${configFile}"
          script {
            env.loadedParameters = sh(returnStdout: true, script: "cat ${configFile}").replaceAll("env.", "")
          }
        }
        script {
          env.DEPLOY_DIR = env.TARGET_FOLDER
          env.FRONTEND_PATH = env.TARGET_FOLDER + "/frontend"
          env.BACKEND_URL = env.FRONTEND_URL
        }
        sh 'echo "' + env.loadedParameters + '" > config.tmp'
      }
    }
    stage('Building app') {
      steps {
        sh "npm install"
        sh "REACT_APP_API=" + env.BACKEND_URL + " npm run build"
      }
    }
    stage('Copying') {
      steps {
        sh "tar cvf build.tar build"
      }
    }
    stage('publishing frontend app to target server') {
      steps {
        dir('deploy_utils') {
          sshPublisher(publishers: [sshPublisherDesc(configName: 'PROD VM', execCommand: '', transfers: [sshTransfer(cleanRemote: false, excludes: '', remoteDirectorySDF: false, removePrefix: '', execTimeout: 120000, flatten: false, makeEmptyDirs: false, noDefaultExcludes: false, patternSeparator: '[, ]+',
            remoteDirectory: './' + env.FRONTEND_PATH,
            sourceFiles: 'docker-compose.yml'
          )], usePromotionTimestamp: false, useWorkspaceInPromotion: false, verbose: false)])
        }
        sshPublisher(publishers: [sshPublisherDesc(configName: 'PROD VM', transfers: [sshTransfer(cleanRemote: false, excludes: '', remoteDirectorySDF: false, removePrefix: '', execTimeout: 120000, flatten: false, makeEmptyDirs: false, noDefaultExcludes: false, patternSeparator: '[, ]+',
          execCommand: 'cd ' + env.FRONTEND_PATH + '; tar -xvf build.tar; rm build.tar',
          remoteDirectory: './' + env.FRONTEND_PATH,
          sourceFiles: 'build.tar,config.tmp'
        )], usePromotionTimestamp: false, useWorkspaceInPromotion: false, verbose: false)])
      }
    }
    stage('running frontend server') {
      steps {
        sshPublisher(publishers: [sshPublisherDesc(configName: 'PROD VM', transfers: [sshTransfer(cleanRemote: false, sourceFiles: '', remoteDirectory: '', excludes: '', remoteDirectorySDF: false, removePrefix: '', execTimeout: 120000, flatten: false, makeEmptyDirs: false, noDefaultExcludes: false, patternSeparator: '[, ]+',
          execCommand: 'cd ' + env.FRONTEND_PATH + '; mv config.tmp .env; docker-compose -p ' + env.FRONTEND_CONTAINER_NAME + ' down; docker-compose -p ' + env.FRONTEND_CONTAINER_NAME + ' up -d'
        )], usePromotionTimestamp: false, useWorkspaceInPromotion: false, verbose: false)])
      }
    }
  }
}
