pipeline {

  agent any

  environment {
    DEPLOY_DIR = "production"
    FRONTEND_DIR = "frontend"
    BACKEND_URL = ""
  }

  stages {
    stage('Building app') {
      steps {
//        sh "npm install"
        sh "REACT_APP_API="+env.BACKEND_URL+" npm run build"
      }
    }
    stage('Copying') {
      steps {
        sh "tar cvf build.tar build"
      }
    }
    stage('publishing frontend app to target server') {
      steps {
        dir('deploy_utils') {
          sshPublisher(publishers: [sshPublisherDesc(configName: 'PROD VM', execCommand: '', transfers: [sshTransfer(cleanRemote: false, excludes: '', remoteDirectorySDF: false, removePrefix: '', execTimeout: 120000, flatten: false, makeEmptyDirs: false, noDefaultExcludes: false, patternSeparator: '[, ]+',
            remoteDirectory: './' + env.DEPLOY_DIR + '/' + env.FRONTEND_DIR,
            sourceFiles: 'docker-compose.yml'
          )], usePromotionTimestamp: false, useWorkspaceInPromotion: false, verbose: false)])
        }
        sshPublisher(publishers: [sshPublisherDesc(configName: 'PROD VM', transfers: [sshTransfer(cleanRemote: false, excludes: '', remoteDirectorySDF: false, removePrefix: '', execTimeout: 120000, flatten: false, makeEmptyDirs: false, noDefaultExcludes: false, patternSeparator: '[, ]+',
          execCommand: 'cd ' + env.DEPLOY_DIR + '/' + env.FRONTEND_DIR + '; tar -xvf build.tar; rm build.tar',
          remoteDirectory: './' + env.DEPLOY_DIR + '/' + env.FRONTEND_DIR,
          sourceFiles: 'build.tar'
        )], usePromotionTimestamp: false, useWorkspaceInPromotion: false, verbose: false)])
      }
    }
    stage('running frontend server') {
      steps {
        sshPublisher(publishers: [sshPublisherDesc(configName: 'PROD VM', transfers: [sshTransfer(cleanRemote: false, sourceFiles: '', remoteDirectory: '', excludes: '', remoteDirectorySDF: false, removePrefix: '', execTimeout: 120000, flatten: false, makeEmptyDirs: false, noDefaultExcludes: false, patternSeparator: '[, ]+',
          execCommand: 'cd ' + env.DEPLOY_DIR + '/' + env.FRONTEND_DIR + '; docker-compose stop; docker-compose up -d'
          )], usePromotionTimestamp: false, useWorkspaceInPromotion: false, verbose: false)])
      }
    }
  }
}
